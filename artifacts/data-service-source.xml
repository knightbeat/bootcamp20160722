<data description="single service for whole database" enableBatchRequests="false" enableBoxcarring="false" name="TravelOrganizerDataService" serviceNamespace="http://dss.bootcamp.com" serviceStatus="active">
   
   <config id="default">
      <property name="carbon_datasource_name">WSO2_DSS_DB</property>
   </config>
   <!--START TRAVELLERS -->
   <query id="select_all_travellers_query" useConfig="default">
      <sql>SELECT record_id, passport, first_name, last_name, date_of_birth FROM travellers</sql>
      <result element="travellers" rowName="traveller">
         <element column="record_id" name="record_id" xsdType="xs:integer"/>
         <element column="passport" name="passport" xsdType="xs:string"/>
         <element column="first_name" name="first_name" xsdType="xs:string"/>
         <element column="last_name" name="last_name" xsdType="xs:string"/>
         <element column="date_of_birth" name="date_of_birth" xsdType="xs:string"/>
      </result>
   </query>
   <operation name="getAllTravellers">
      <call-query href="select_all_travellers_query"/>
   </operation>
   <resource method="GET" path="/travellers">
      <call-query href="select_all_travellers_query"/>
   </resource>
   
   <query id="select_with_passport_travellers_query" useConfig="default">
      <sql>SELECT record_id, passport, first_name, last_name, date_of_birth FROM travellers WHERE passport=?</sql>
      <param name="passport" ordinal="1" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <result element="travellers" rowName="traveller">
         <element column="record_id" name="record_id" xsdType="xs:integer"/>
         <element column="passport" name="passport" xsdType="xs:string"/>
         <element column="first_name" name="first_name" xsdType="xs:string"/>
         <element column="last_name" name="last_name" xsdType="xs:string"/>
         <element column="date_of_birth" name="date_of_birth" xsdType="xs:string"/>
      </result>
   </query>
    <operation name="getTraveller">
      <call-query href="select_with_passport_travellers_query">
         <with-param name="passport" query-param="passport"/>
      </call-query>
   </operation>
   <resource method="GET" path="/travellers/{passport}">
      <call-query href="select_with_passport_travellers_query">
         <with-param name="passport" query-param="passport"/>
      </call-query>
   </resource>
   
   <query id="insert_travellers_query" useConfig="default">
      <sql>INSERT INTO travellers(passport,first_name,last_name,date_of_birth) VALUES(?,?,?,?)</sql>
      <param name="passport" ordinal="1" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="first_name" ordinal="2" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="last_name" ordinal="3" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="date_of_birth" ordinal="4" paramType="SCALAR" sqlType="STRING" type="IN"/>
   </query>
   <operation name="insertTraveller">
      <call-query href="insert_travellers_query">
         <with-param name="passport" query-param="passport"/>
         <with-param name="last_name" query-param="last_name"/>
         <with-param name="first_name" query-param="first_name"/>
         <with-param name="date_of_birth" query-param="date_of_birth"/>
      </call-query>
   </operation>
   <resource method="POST" path="/travellers">
      <call-query href="insert_travellers_query">
         <with-param name="passport" query-param="passport"/>
         <with-param name="first_name" query-param="first_name"/>
         <with-param name="last_name" query-param="last_name"/>
         <with-param name="date_of_birth" query-param="date_of_birth"/>
      </call-query>
   </resource>
   
   <query id="update_travellers_query" useConfig="default">
      <sql>UPDATE travellers SET first_name=?,last_name=?,date_of_birth=? WHERE passport=?</sql>
      <param name="first_name" ordinal="1" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="last_name" ordinal="2" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="date_of_birth" ordinal="3" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="passport" ordinal="4" paramType="SCALAR" sqlType="STRING" type="IN"/>
   </query>
   <operation name="updateTraveller">
      <call-query href="update_travellers_query">
        <with-param name="first_name" query-param="first_name"/>
        <with-param name="last_name" query-param="last_name"/>
        <with-param name="date_of_birth" query-param="date_of_birth"/>
        <with-param name="passport" query-param="passport"/>
      </call-query>
   </operation>
   <resource method="PUT" path="/travellers">
      <call-query href="update_travellers_query">
         <with-param name="first_name" query-param="first_name"/>
         <with-param name="last_name" query-param="last_name"/>
         <with-param name="date_of_birth" query-param="date_of_birth"/>
         <with-param name="passport" query-param="passport"/>
      </call-query>
   </resource>
   
   <query id="delete_travellers_query" useConfig="default">
      <sql>DELETE FROM travellers WHERE passport=?</sql>
      <param name="passport" ordinal="1" paramType="SCALAR" sqlType="STRING" type="IN"/>
   </query>
   <operation name="deleteTraveller">
      <call-query href="delete_travellers_query">
         <with-param name="passport" query-param="passport"/>
      </call-query>
   </operation>
   <resource method="DELETE" path="/travellers/{passport}">
      <call-query href="delete_travellers_query">
         <with-param name="passport" query-param="passport"/>
      </call-query>
   </resource>
   <!--END TRAVELLERS -->
   
   <!--START JOURNEYS -->
   <query id="select_all_journey_plans_query" useConfig="default">
      <sql>SELECT record_id, passport, plan_id, start_time, start_zipcode, end_zipcode FROM journey_plans</sql>
      <result element="journey_plans" rowName="journey_plan">
         <element column="record_id" name="record_id" xsdType="xs:integer"/>
         <element column="passport" name="passport" xsdType="xs:string"/>
         <element column="plan_id" name="plan_id" xsdType="xs:string"/>
         <element column="start_time" name="start_time" xsdType="xs:string"/>
         <element column="start_zipcode" name="start_zipcode" xsdType="xs:string"/>
         <element column="end_zipcode" name="end_zipcode" xsdType="xs:string"/>
      </result>
   </query>
   <operation name="getAllJourneyPlans">
      <call-query href="select_all_journey_plans_query"/>
   </operation>
   
   <query id="select_with_key_journey_plans_query" useConfig="default">
      <sql>SELECT record_id, start_time, start_zipcode, end_zipcode FROM journey_plans WHERE passport=? AND plan_id=?</sql>
      <param name="passport" ordinal="1" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="plan_id" ordinal="2" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <result element="journey_plans" rowName="journey_plan">
         <element column="record_id" name="record_id" xsdType="xs:integer"/>
         <element column="start_time" name="start_time" xsdType="xs:string"/>
         <element column="start_zipcode" name="start_zipcode" xsdType="xs:string"/>
         <element column="end_zipcode" name="end_zipcode" xsdType="xs:string"/>
      </result>
   </query>
   <operation name="getJourneyPlan">
      <call-query href="select_with_key_journey_plans_query">
         <with-param name="passport" query-param="passport"/>
         <with-param name="plan_id" query-param="plan_id"/>
      </call-query>
   </operation>
   
   <query id="insert_journey_plans_query" useConfig="default">
      <sql>INSERT INTO journey_plans(passport,plan_id,start_time,start_zipcode,end_zipcode) VALUES(?,?,?,?,?)</sql>
      <param name="passport" ordinal="1" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="plan_id" ordinal="2" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="start_time" ordinal="3" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="start_zipcode" ordinal="4" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="end_zipcode" ordinal="5" paramType="SCALAR" sqlType="STRING" type="IN"/>
   </query>
   <operation name="insertJourneyPlan">
      <call-query href="insert_journey_plans_query">
        <with-param name="passport" query-param="passport"/>
        <with-param name="plan_id" query-param="plan_id"/>
        <with-param name="start_time" query-param="start_time"/>
        <with-param name="start_zipcode" query-param="start_zipcode"/>
        <with-param name="end_zipcode" query-param="end_zipcode"/>
      </call-query>
   </operation>
   
   <query id="update_journey_plans_query" useConfig="default">
      <sql>UPDATE journey_plans SET start_time=?,start_zipcode=?,end_zipcode=? WHERE passport=? AND plan_id=?</sql>
      <param name="start_time" ordinal="1" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="start_zipcode" ordinal="2" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="end_zipcode" ordinal="3" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="passport" ordinal="4" paramType="SCALAR" sqlType="STRING" type="IN"/>
      <param name="plan_id" ordinal="5" paramType="SCALAR" sqlType="STRING" type="IN"/>
   </query>
   <operation name="updateJourneyPlan">
      <call-query href="update_journey_plans_query">
         <with-param name="start_time" query-param="start_time"/>
         <with-param name="start_zipcode" query-param="start_zipcode"/>
         <with-param name="end_zipcode" query-param="end_zipcode"/>
         <with-param name="passport" query-param="passport"/>
         <with-param name="plan_id" query-param="plan_id"/>
      </call-query>
   </operation>   
   
   <query id="delete_journey_plans_query" useConfig="default">
      <sql>DELETE FROM journey_plans WHERE passport=?</sql>
      <param name="passport" ordinal="1" paramType="SCALAR" sqlType="STRING" type="IN"/>
   </query>
   <operation name="deleteJourneyPlan">
      <call-query href="delete_journey_plans_query">
         <with-param name="passport" query-param="passport"/>
      </call-query>
   </operation>
   <!--END JOURNEYS -->
</data>
